{"version":3,"sources":["actions/CommentActions.js","reducers/comments.js","actions/NewCommentActions.js","reducers/newComment.js","reducers/index.js","store/configureStore.js","containers/Add.js","components/Article.js","components/Comments.js","containers/App.js","serviceWorker.js","index.js"],"names":["GET_COMMENTS_REQUEST","GET_COMMENTS_SUCCESS","ADD_COMMENT","REMOVE_COMMENT","initialState","data","isLoading","saveComments","comments","localStorage","setItem","JSON","stringify","addComment","comment","state","nextComments","concat","Object","toConsumableArray","removeComment","removingComment","newComments","filter","id","CHANGE_PROP_NEW_COMMENT","RESET_NEW_COMMENT","emptyComment","name","text","agree","disabled","updateComment","props","nextState","objectSpread","trim","validate","rootReducer","combineReducers","arguments","length","undefined","action","type","payload","newComment","middleware","thunk","store","createStore","applyMiddleware","apply","Add","onBtnClickHandler","e","preventDefault","_this$props","_this","date","Date","addCommentAction","author","handleChange","_e$currentTarget","currentTarget","value","propChangeAction","defineProperty","handleCheckboxChange","checked","_this$props2","this","react_default","a","createElement","className","onChange","placeholder","onClick","Component","connect","dispatch","propChange","Article","handleRemoveBtnClick","onRemoveComment","_this$props$data","dateFormat","toLocaleString","React","Comments","handleRemoveComment","renderComments","map","item","Article_Article","key","App","removeCommentAction","Fragment","containers_Add","Array","isArray","Comments_Comments","getCommentsAction","setTimeout","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAAaA,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAc,cACdC,EAAiB,iBCI9B,IAAMC,EAAe,CACnBC,KAAM,GACNC,WAAW,GAGPC,EAAe,SAAAC,GACnBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,KAG5CK,EAAa,SAACC,EAASC,GAC3B,IAAMC,EAAY,CAAIF,GAAJG,OAAAC,OAAAC,EAAA,EAAAD,CAAgBH,EAAMV,OAExC,OADAE,EAAaS,GACNA,GAGHI,EAAgB,SAACC,EAAiBN,GACtC,IAAMO,EAAcP,EAAMV,KAAKkB,OAAO,SAAAT,GACpC,OAAOA,EAAQU,KAAOH,EAAgBG,KAGxC,OADAjB,EAAae,GACNA,GC3BF,IAAMG,EAA0B,0BAC1BC,EAAoB,oBCI1B,IAAMC,EAAe,CAC1BH,GAAI,KACJI,KAAM,GACNC,KAAM,GACNC,OAAO,EACPC,UAAU,GAGN3B,EAAeuB,EAOfK,EAAgB,SAACjB,EAAOkB,GAC5B,IAAMC,EAAShB,OAAAiB,EAAA,EAAAjB,CAAA,GACVH,EACAkB,GAIL,OADAC,EAAUH,UAXK,SAAAhB,GAAS,IAChBa,EAAsBb,EAAtBa,KAAMC,EAAgBd,EAAhBc,KAAMC,EAAUf,EAAVe,MACpB,SAAUF,EAAKQ,QAAUP,EAAKO,QAAUN,GASlBO,CAASH,GACxBA,GCvBF,IAAMI,EAAcC,YAAgB,CACzC/B,SHyBK,WAAuD,IAA9BO,EAA8ByB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBpC,EAAcuC,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,OAAQC,EAAOC,MACb,KAAK5C,EACH,OAAOkB,OAAAiB,EAAA,EAAAjB,CAAA,GACFH,EADL,CAEET,WAAW,IAGf,KAAKL,EACH,OAAOiB,OAAAiB,EAAA,EAAAjB,CAAA,GACFH,EADL,CAEEV,KAAMsC,EAAOE,QACbvC,WAAW,IAGf,KAAKJ,EACH,OAAOgB,OAAAiB,EAAA,EAAAjB,CAAA,GACFH,EADL,CAEEV,KAAMQ,EAAW8B,EAAOE,QAAS9B,KAGrC,KAAKZ,EACH,OAAOe,OAAAiB,EAAA,EAAAjB,CAAA,GACFH,EADL,CAEEV,KAAMe,EAAcuB,EAAOE,QAAS9B,KAGxC,QACE,OAAOA,IGpDX+B,WDwBK,WAAyD,IAA9B/B,EAA8ByB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBpC,EAAcuC,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9D,OAAQC,EAAOC,MACb,KAAKnB,EACH,OAAOO,EAAcjB,EAAO4B,EAAOE,SACrC,KAAKnB,EACH,OAAOM,EAAcjB,EAAOY,GAE9B,QACE,OAAOZ,MEjCTgC,SAAa,OAACC,IAIX,IAAMC,EAAQC,YAAYZ,EAAaa,IAAeC,WAAf,EAAAlC,OAAAC,EAAA,EAAAD,CAAmB6B,wDCJ3DM,6MACJC,kBAAoB,SAAAC,GAClBA,EAAEC,iBADqB,IAAAC,EAEAC,EAAKzB,MAApBL,EAFe6B,EAEf7B,KAAMC,EAFS4B,EAET5B,KACR8B,EAAO,IAAIC,KACjBF,EAAKzB,MAAM4B,iBAAiB,CAC1BrC,IAAKmC,EACLG,OAAQlC,EACRC,OACA8B,YAIJI,aAAe,SAAAR,GAAK,IAAAS,EACIT,EAAEU,cAAhBzC,EADUwC,EACVxC,GAAI0C,EADMF,EACNE,MACZR,EAAKzB,MAAMkC,iBAAXjD,OAAAkD,EAAA,EAAAlD,CAAA,GACGM,EAAK0C,OAIVG,qBAAuB,SAAAd,GACrBG,EAAKzB,MAAMkC,iBAAiB,CAC1BrC,MAAOyB,EAAEU,cAAcK,mFAIlB,IAAAC,EACiCC,KAAKvC,MAArCL,EADD2C,EACC3C,KAAMC,EADP0C,EACO1C,KAAMC,EADbyC,EACazC,MAAOC,EADpBwC,EACoBxC,SAC3B,OACE0C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACEnD,GAAG,OACHoB,KAAK,OACLiC,SAAUL,KAAKT,aACfa,UAAU,cACVE,YAAY,8CACZZ,MAAOtC,IAET6C,EAAAC,EAAAC,cAAA,YACEnD,GAAG,OACHqD,SAAUL,KAAKT,aACfa,UAAU,YACVE,YAAY,oGACZZ,MAAOrC,IAET4C,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,SACE/B,KAAK,WACLiC,SAAUL,KAAKH,qBACfC,QAASxC,IAJb,yHAQA2C,EAAAC,EAAAC,cAAA,UACEC,UAAU,WACVG,QAASP,KAAKlB,kBACdvB,SAAUA,GAHZ,+HArDUiD,aAuFHC,cAZS,SAAAhC,GACtB,MAAO,CACLH,WAAYG,EAAMH,aAIK,SAAAoC,GACzB,MAAO,CACLf,iBAAkB,SAAAlC,GAAK,OAAIiD,EJrFxB,SAAoBjD,GACzB,OAAO,SAAAiD,GACLA,EAAS,CACPtC,KAAMnB,EACNoB,QAASZ,KIiFyBkD,CAAWlD,OAIpCgD,CAGb5B,GC5FI+B,6MAEJC,qBAAuB,WAAM,IACnB7D,EAAOkC,EAAKzB,MAAM5B,KAAlBmB,GACRkC,EAAKzB,MAAMqD,gBAAgB,CAAC9D,gFAErB,IAAA+D,EACwBf,KAAKvC,MAAM5B,KAAlCyD,EADDyB,EACCzB,OAAQjC,EADT0D,EACS1D,KACV2D,EAFCD,EACe5B,KACE8B,iBACxB,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBd,EAAjC,IAAyCW,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCY,EAAnC,KAAzC,KACAf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkB/C,GAE/B4C,EAAAC,EAAAC,cAAA,UACIC,UAAU,cACVG,QAASP,KAAKa,sBAFlB,yHAdcK,IAAMV,WCCtBW,6MACJC,oBAAsB,SAAArC,GACpBG,EAAKzB,MAAMqD,gBAAgB/B,MAE7BsC,eAAiB,WAAM,IACbxF,EAASqD,EAAKzB,MAAd5B,KAiBR,OAdIA,EAAKoC,OACIpC,EAAKyF,IAAI,SAAAC,GAClB,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,CACEV,gBAAiB5B,EAAKkC,oBACtBK,IAAKF,EAAKvE,GACVnB,KAAM0F,MAKDtB,EAAAC,EAAAC,cAAA,iLAMN,IACCtE,EAASmE,KAAKvC,MAAd5B,KAER,OACEoE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZJ,KAAKqB,iBACLxF,EAAKoC,OACJgC,EAAAC,EAAAC,cAAA,UAAQC,UAAW,mBAAnB,4GACuBvE,EAAKoC,QAE1B,aAnCWiD,IAAMV,WCSvBkB,0LACK,IAAAzC,EAMHe,KAAKvC,MAJPzB,EAFKiD,EAELjD,SACAsC,EAHKW,EAGLX,WACAe,EAJKJ,EAILI,iBACAsC,EALK1C,EAKL0C,oBAEF,OACE1B,EAAAC,EAAAC,cAACF,EAAAC,EAAM0B,SAAP,KACE3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEzE,KAAMkB,EAAWlB,KACjBC,KAAMiB,EAAWjB,KACjBC,MAAOgB,EAAWhB,MAClBC,SAAUe,EAAWf,SACrB8B,iBAAkBA,IAEpBY,EAAAC,EAAAC,cAAA,gFACCnE,EAASF,WAAamE,EAAAC,EAAAC,cAAA,gEACtB2B,MAAMC,QAAQ/F,EAASH,OACtBoE,EAAAC,EAAAC,cAAC6B,EAAD,CACElB,gBAAiBa,EACjB9F,KAAMG,EAASH,oDAQvBmE,KAAKvC,MAAMwE,2BA9BGzB,cA4DHC,cAnBS,SAAAhC,GACtB,MAAO,CACLzC,SAAUyC,EAAMzC,SAChBsC,WAAYG,EAAMH,aAIK,SAAAoC,GACzB,MAAO,CACLuB,kBAAmB,kBAAMvB,ETzDpB,SAAAA,GACLA,EAAS,CACPtC,KAAM5C,IAGR0G,WAAW,WACT,IAAIlG,EAAWC,aAAakG,QAAQ,YACpCnG,EAAWG,KAAKiG,MAAMpG,IAAa,GACnC0E,EAAS,CACPtC,KAAM3C,EACN4C,QAASrC,EAASsF,IAAI,SAAAC,GAEpB,OADAA,EAAKpC,KAAO,IAAIC,KAAKmC,EAAKpC,MACnBoC,OAGV,QS2CHlC,iBAAkB,SAAA/C,GAChBoE,ETxCC,SAAoBpE,GACzB,OAAO,SAAAoE,GACLA,EAAS,CACPtC,KAAM1C,EACN2C,QAAS/B,KSoCAD,CAAWC,IACpBoE,EPrDG,SAAAA,GACLA,EAAS,CACPtC,KAAMlB,OOqDRyE,oBAAqB,SAAArF,GAAO,OAAIoE,ETlC7B,SAAuBpE,GAC5B,OAAO,SAAAoE,GACLA,EAAS,CACPtC,KAAMzC,EACN0C,QAAS/B,KS8B8BM,CAAcN,OAK5CmE,CAGbiB,GChEkBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAUnE,MAAOA,GACfwB,EAAAC,EAAAC,cAAC0C,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c3b9fc7.chunk.js","sourcesContent":["export const GET_COMMENTS_REQUEST = 'GET_COMMENTS_REQUEST';\r\nexport const GET_COMMENTS_SUCCESS = 'GET_COMMENTS_SUCCESS';\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\r\n\r\nexport function getComments() {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: GET_COMMENTS_REQUEST,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      let comments = localStorage.getItem('comments');\r\n      comments = JSON.parse(comments) || [];\r\n      dispatch({\r\n        type: GET_COMMENTS_SUCCESS,\r\n        payload: comments.map(item => {\r\n          item.date = new Date(item.date);\r\n          return item;\r\n        }),\r\n      });\r\n    }, 1000);\r\n  };\r\n}\r\n\r\nexport function addComment(comment) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: ADD_COMMENT,\r\n      payload: comment,\r\n    });\r\n  };\r\n}\r\n\r\nexport function removeComment(comment) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: REMOVE_COMMENT,\r\n      payload: comment,\r\n    });\r\n  };\r\n}\r\n","import {\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT,\r\n  GET_COMMENTS_REQUEST,\r\n  GET_COMMENTS_SUCCESS,\r\n} from '../actions/CommentActions';\r\n\r\nconst initialState = {\r\n  data: [],\r\n  isLoading: false,\r\n};\r\n\r\nconst saveComments = comments => {\r\n  localStorage.setItem('comments', JSON.stringify(comments));\r\n};\r\n\r\nconst addComment = (comment, state) => {\r\n  const nextComments = [comment, ...state.data];\r\n  saveComments(nextComments);\r\n  return nextComments;\r\n};\r\n\r\nconst removeComment = (removingComment, state) => {\r\n  const newComments = state.data.filter(comment => {\r\n    return comment.id !== removingComment.id;\r\n  });\r\n  saveComments(newComments);\r\n  return newComments;\r\n};\r\n\r\nexport function commentsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_COMMENTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n\r\n    case GET_COMMENTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        isLoading: false,\r\n      };\r\n\r\n    case ADD_COMMENT:\r\n      return {\r\n        ...state,\r\n        data: addComment(action.payload, state),\r\n      };\r\n\r\n    case REMOVE_COMMENT:\r\n      return {\r\n        ...state,\r\n        data: removeComment(action.payload, state),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const CHANGE_PROP_NEW_COMMENT = 'CHANGE_PROP_NEW_COMMENT';\r\nexport const RESET_NEW_COMMENT = 'RESET_NEW_COMMENT';\r\n\r\nexport function propChange(props) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: CHANGE_PROP_NEW_COMMENT,\r\n      payload: props,\r\n    });\r\n  };\r\n}\r\n\r\nexport function resetNewComment() {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: RESET_NEW_COMMENT,\r\n    });\r\n  };\r\n}\r\n","import {\r\n  CHANGE_PROP_NEW_COMMENT,\r\n  RESET_NEW_COMMENT,\r\n} from '../actions/NewCommentActions';\r\n\r\nexport const emptyComment = {\r\n  id: null,\r\n  name: '',\r\n  text: '',\r\n  agree: false,\r\n  disabled: true,\r\n};\r\n\r\nconst initialState = emptyComment;\r\n\r\nconst validate = state => {\r\n  const { name, text, agree } = state;\r\n  return !!(name.trim() && text.trim() && agree);\r\n};\r\n\r\nconst updateComment = (state, props) => {\r\n  const nextState = {\r\n    ...state,\r\n    ...props,\r\n  };\r\n\r\n  nextState.disabled = !validate(nextState);\r\n  return nextState;\r\n};\r\n\r\nexport function newCommentReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_PROP_NEW_COMMENT:\r\n      return updateComment(state, action.payload);\r\n    case RESET_NEW_COMMENT:\r\n      return updateComment(state, emptyComment);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { commentsReducer } from './comments';\r\nimport { newCommentReducer } from './newComment';\r\n\r\nexport const rootReducer = combineReducers({\r\n  comments: commentsReducer,\r\n  newComment: newCommentReducer,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from '../reducers';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet middleware = [thunk];\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middleware = [...middleware, logger];\r\n}\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { propChange } from '../actions/NewCommentActions';\r\n\r\nclass Add extends Component {\r\n  onBtnClickHandler = e => {\r\n    e.preventDefault();\r\n    const { name, text } = this.props;\r\n    const date = new Date();\r\n    this.props.addCommentAction({\r\n      id: +date,\r\n      author: name,\r\n      text,\r\n      date,\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { id, value } = e.currentTarget;\r\n    this.props.propChangeAction({\r\n      [id]: value,\r\n    });\r\n  };\r\n\r\n  handleCheckboxChange = e => {\r\n    this.props.propChangeAction({\r\n      agree: e.currentTarget.checked,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, text, agree, disabled } = this.props;\r\n    return (\r\n      <form className=\"add\">\r\n        <input\r\n          id=\"name\"\r\n          type=\"text\"\r\n          onChange={this.handleChange}\r\n          className=\"add__author\"\r\n          placeholder=\"Ваше имя\"\r\n          value={name}\r\n        />\r\n        <textarea\r\n          id=\"text\"\r\n          onChange={this.handleChange}\r\n          className=\"add__text\"\r\n          placeholder=\"Текст комментария\"\r\n          value={text}\r\n        />\r\n        <label className=\"add__checkrule\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.handleCheckboxChange}\r\n            checked={agree}\r\n          />\r\n          Я согласен с правилами\r\n        </label>\r\n        <button\r\n          className=\"add__btn\"\r\n          onClick={this.onBtnClickHandler}\r\n          disabled={disabled}\r\n        >\r\n          Добавить комментарий\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAdd.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  agree: PropTypes.bool.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  addCommentAction: PropTypes.func.isRequired,\r\n  propChangeAction: PropTypes.func.isRequired,\r\n};\r\n\r\n// приклеиваем данные из store\r\nconst mapStateToProps = store => {\r\n  return {\r\n    newComment: store.newComment,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    propChangeAction: props => dispatch(propChange(props)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Add);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Article extends React.Component {\r\n\r\n  handleRemoveBtnClick = () => {\r\n    const { id } = this.props.data;\r\n    this.props.onRemoveComment({id})\r\n  };\r\n  render() {\r\n    const { author, text, date } = this.props.data;\r\n    const dateFormat = date.toLocaleString();\r\n    return (\r\n      <div className=\"article\">\r\n        <p className=\"comments__author\">{author} <span className=\"comments__date\">({dateFormat})</span>:</p>\r\n        <p className=\"comments__text\">{text}</p>\r\n\r\n        <button\r\n            className=\"remove__btn\"\r\n            onClick={this.handleRemoveBtnClick}\r\n        >\r\n          Удалить комментарий\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nArticle.propTypes = {\r\n  onRemoveComment: PropTypes.func.isRequired,\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number.isRequired, // добавили id, это число, обязательно\r\n    author: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n  }),\r\n};\r\n\r\nexport { Article }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Article } from './Article';\r\n\r\nclass Comments extends React.Component {\r\n  handleRemoveComment = e => {\r\n    this.props.onRemoveComment(e);\r\n  };\r\n  renderComments = () => {\r\n    const { data } = this.props;\r\n    let template = null;\r\n\r\n    if (data.length) {\r\n      template = data.map(item => {\r\n        return (\r\n          <Article\r\n            onRemoveComment={this.handleRemoveComment}\r\n            key={item.id}\r\n            data={item}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      template = <p>Комментариев нет</p>;\r\n    }\r\n\r\n    return template;\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <div className=\"comments\">\r\n        {this.renderComments()}\r\n        {data.length ? (\r\n          <strong className={'comments__count'}>\r\n            Всего комментариев: {data.length}\r\n          </strong>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nComments.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport { Comments };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Add from './Add';\r\nimport { Comments } from '../components/Comments';\r\nimport {\r\n  getComments,\r\n  addComment,\r\n  removeComment,\r\n} from '../actions/CommentActions';\r\nimport { resetNewComment } from '../actions/NewCommentActions';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const {\r\n      comments,\r\n      newComment,\r\n      addCommentAction,\r\n      removeCommentAction,\r\n    } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Add\r\n          name={newComment.name}\r\n          text={newComment.text}\r\n          agree={newComment.agree}\r\n          disabled={newComment.disabled}\r\n          addCommentAction={addCommentAction}\r\n        />\r\n        <h3>Комментарии</h3>\r\n        {comments.isLoading && <p>Загружаю...</p>}\r\n        {Array.isArray(comments.data) && (\r\n          <Comments\r\n            onRemoveComment={removeCommentAction}\r\n            data={comments.data}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getCommentsAction();\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  getCommentsAction: PropTypes.func.isRequired,\r\n  addCommentAction: PropTypes.func.isRequired,\r\n  removeCommentAction: PropTypes.func.isRequired,\r\n};\r\n\r\n// приклеиваем данные из store\r\nconst mapStateToProps = store => {\r\n  return {\r\n    comments: store.comments,\r\n    newComment: store.newComment,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCommentsAction: () => dispatch(getComments()),\r\n    addCommentAction: comment => {\r\n      dispatch(addComment(comment));\r\n      dispatch(resetNewComment());\r\n    },\r\n    removeCommentAction: comment => dispatch(removeComment(comment)),\r\n  };\r\n};\r\n\r\n// в наш компонент App, с помощью connect(mapStateToProps)\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated pre cached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been pre cached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/configureStore';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}